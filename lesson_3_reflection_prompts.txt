When would you want to use a remote repository rather than keeping all your work local?
  When local storage is not enough for building a big project or I want to replace my old computer and buy a new personal computer; 
  When I need to use another computer to access my project and work on it; 
  When I want to share my project with other friends.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
	If multiple branches are working together, I need to pull manually to check what new changes are from other people. And I need to take controll of what new stuff is in my local repository.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
	forks: between repositories on GitHub. to copy a whole repository from one user's account to another user's account
	clones: between remote repository or local repository and local. copy a repository either from remote site or your local directory to your own local working directory
	branches: copy a commit and make it a branch to get separated. when you want to do something in parallel

What is the benefit of having a copy of the last known state of the remote stored locally?
	People can find out what local change he has made from the last clone. 

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
	Without Git or GitHub, the process for people to collaborate is easier. All we need to do is to find that person and talk with him to explain what changes are, and how to merge. However, it is harder to communicate if there a lots of files to be changed. People need to point out one by one with the risk of missing out something or accidentally changing something wrong. Git and GitHub provides a simple platform to show difference and list all needed files.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
	When I hope to make a feature work before adding it to the master.
	Working on master is good for sharing changes with all branches so that branches get updated from them, such as bug fix, configuration variable changes.
	Working on branch allows people to test their own feature or changes without the risking of adding a lot of new stuff that sometimes could effect other people. Changes on branche are not global before pushing to the master, so that other peple won't get confused.
 
